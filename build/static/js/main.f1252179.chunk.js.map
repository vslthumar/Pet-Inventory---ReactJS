{"version":3,"sources":["component.js/Navbar.js","component.js/Home.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","style","color","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","Home","props","increment","e","preventDefault","setState","count","state","decrement","fSubmit","console","log","datas","name","refs","value","grade","act","data","push","index","myForm","reset","focus","grade_error","course_error","fRemove","i","splice","fEdit","changeBtn","this","marginLeft","ref","placeholder","fontSize","minLength","maxLength","onClick","map","key","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1252179.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-primary\">\r\n  <Link style={{color:\"white\"}} className=\"navbar-brand\" to=\"/\">Grade Application</Link>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n</nav>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport $ from 'jquery'\r\nimport { findDOMNode } from 'react-dom'\r\nimport Navbar from './Navbar'\r\n\r\n\r\nexport default class Home extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n          act: 0,\r\n          index: '',\r\n          datas: [],\r\n          course_error:'',\r\n          grade_error:'',\r\n          changeBtn:true\r\n        }\r\n      } \r\n    \r\n      componentDidMount(){\r\n        this.refs.name.focus();\r\n      }\r\n\r\n      increment = (e) =>{\r\n          e.preventDefault();\r\n          this.setState({ count: this.state.count + 1 })\r\n      }\r\n\r\n      decrement = (e) =>{\r\n        e.preventDefault();\r\n        this.setState({ count: this.state.count - 1 })\r\n      }\r\n\r\n    \r\n      fSubmit = (e) =>{\r\n        e.preventDefault();\r\n        console.log('try');\r\n        let datas = this.state.datas;\r\n        let name = this.refs.name.value;\r\n        let grade = this.refs.grade.value;\r\n\r\n        if(!name==\"\"){\r\n            if(!grade==\"\"){\r\n                if(this.state.act === 0){ \r\n                    //new\r\n                   let data = {\r\n                     name, grade\r\n                   }\r\n                   datas.push(data);\r\n                 }else{\r\n                                      //update\r\n                   let index = this.state.index;\r\n                   datas[index].name = name;\r\n                   datas[index].grade = grade;\r\n                 }\r\n         \r\n                 this.setState({\r\n                   datas: datas,\r\n                   act: 0\r\n                 });\r\n          \r\n                 this.refs.myForm.reset();\r\n                 this.refs.name.focus();\r\n            }\r\n            else{\r\n                this.setState({grade_error : \"Grade must be an integer between 0-100\"})\r\n        }\r\n        }\r\n        else{\r\n            this.setState({course_error : \"Course name cannot be blank\"})\r\n        }\r\n      }\r\n    \r\n      fRemove = (i) => {\r\n        let datas = this.state.datas;\r\n        datas.splice(i,1);\r\n        this.setState({\r\n          datas: datas\r\n        });\r\n    \r\n        this.refs.myForm.reset();\r\n        this.refs.name.focus();\r\n      }\r\n    \r\n      fEdit = (i) => {\r\n        \r\n        let data = this.state.datas[i];\r\n        this.refs.name.value = data.name;\r\n        this.refs.grade.value = data.grade;\r\n        this.state.changeBtn = false\r\n        \r\n     if(this.state.changeBtn==false){\r\n        this.setState({\r\n            act: 1,\r\n            index: i,\r\n          });\r\n      \r\n     }\r\n        \r\n        this.refs.name.focus();\r\n    \r\n    }\r\n\r\n    render() {\r\n        let datas = this.state.datas;\r\n        \r\n        return (\r\n            <div>\r\n                 <Navbar /> <br/> <br/> \r\n            <div className=\"row\">\r\n                <div style={{marginLeft:'500px'}} className=\"col-md-5\">\r\n                \r\n        <h2 className=\"text-center\">Add Data</h2>\r\n        <form ref=\"myForm\" >\r\n        <div className=\"form-group\">\r\n         <label>Course Name</label>\r\n          <input \r\n          type=\"text\" \r\n          ref=\"name\" \r\n          placeholder=\"Course Name\" \r\n          className=\"form-control\" \r\n          />\r\n          <small style={{fontSize:'15px'}} className=\"form-text text-danger\" >{this.state.course_error}</small>\r\n          </div>\r\n          <div className=\"form-group\">\r\n          <label>Grade</label>\r\n          <input \r\n          type=\"number\" \r\n          minLength=\"0\"\r\n          maxLength=\"100\"\r\n          ref=\"grade\" \r\n          placeholder=\"Grade 0 to 100\" \r\n          className=\"form-control\" \r\n          />\r\n          <small style={{fontSize:'15px'}} className=\"form-text text-danger\" >{this.state.grade_error}</small>\r\n          </div>\r\n          \r\n        {this.state.changeBtn ? (<button onClick={(e)=>this.fSubmit(e)} className=\"btn btn-primary\">Submit </button>) : (<button onClick={(e)=>this.fSubmit(e)} className=\"btn btn-primary\">Edit </button>)}\r\n          \r\n        </form>\r\n      </div>\r\n    \r\n\r\n      <div style={{marginLeft:'500px'}} className=\"col-md-5\" >\r\n      <hr/>\r\n      <h2 className=\"text-center\">Show Data</h2>\r\n      <table className=\"table\">\r\n  <thead className=\"thead-light\">\r\n    <tr>\r\n      <th>Id</th>\r\n      <th>Course Name</th>\r\n      <th>Grade</th>\r\n      <th>Action</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n  {datas.map((data, i) =>\r\n    <tr key={i}>\r\n        <td>{i+1}</td>\r\n      <td>{data.name}</td>\r\n      <td>{data.grade}</td>\r\n      <td>\r\n      <button className=\"btn btn-primary\" onClick={()=>this.fEdit(i)} ><i className=\"fa fa-pencil\"></i></button>&nbsp;&nbsp;\r\n      <button className=\"btn btn-danger\" onClick={()=>this.fRemove(i)}><i className=\"fa fa-trash\"></i></button>\r\n      </td>\r\n    </tr>\r\n )}\r\n  </tbody>\r\n</table>\r\n      </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport Home from './component.js/Home';\n\nclass App extends Component {\n  render() {\n  \n    return (\n     <BrowserRouter>\n     <Route path=\"/\" component={Home} />\n     </BrowserRouter>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}